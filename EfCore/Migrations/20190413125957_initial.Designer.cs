// <auto-generated />
using System;
using EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfCore.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20190413125957_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EfCore.BaseSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("ProductNodeId");

                    b.Property<bool>("UseParent");

                    b.HasKey("Id");

                    b.HasIndex("ProductNodeId");

                    b.ToTable("BaseSection");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseSection");
                });

            modelBuilder.Entity("EfCore.ProductLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductLevels");
                });

            modelBuilder.Entity("EfCore.ProductNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LevelId");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductNodes");
                });

            modelBuilder.Entity("Rail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Script");

                    b.HasKey("Id");

                    b.ToTable("Rail");
                });

            modelBuilder.Entity("EfCore.BasicInfoSection", b =>
                {
                    b.HasBaseType("EfCore.BaseSection");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasDiscriminator().HasValue("BasicInfoSection");
                });

            modelBuilder.Entity("EfCore.BonusPaymentSection", b =>
                {
                    b.HasBaseType("EfCore.BaseSection");

                    b.Property<bool>("IsAllowed");

                    b.Property<decimal>("MaxAmount");

                    b.Property<decimal>("MinAmount");

                    b.HasDiscriminator().HasValue("BonusPaymentSection");
                });

            modelBuilder.Entity("EfCore.FtcSection", b =>
                {
                    b.HasBaseType("EfCore.BaseSection");

                    b.Property<decimal>("Apr");

                    b.Property<decimal>("Cost");

                    b.Property<bool>("IsApplicable");

                    b.HasDiscriminator().HasValue("FtcSection");
                });

            modelBuilder.Entity("EfCore.RentalSection", b =>
                {
                    b.HasBaseType("EfCore.BaseSection");

                    b.Property<bool>("InArrears");

                    b.Property<int>("PaymentFrequency");

                    b.HasDiscriminator().HasValue("RentalSection");
                });

            modelBuilder.Entity("EfCore.TermsSection", b =>
                {
                    b.HasBaseType("EfCore.BaseSection");

                    b.Property<int>("MaxTerms");

                    b.Property<int>("MinTerms");

                    b.Property<int?>("RailId");

                    b.HasIndex("RailId");

                    b.HasDiscriminator().HasValue("TermsSection");
                });

            modelBuilder.Entity("EfCore.JapanBasicInfoSection", b =>
                {
                    b.HasBaseType("EfCore.BasicInfoSection");

                    b.Property<string>("KatakanaName");

                    b.HasDiscriminator().HasValue("JapanBasicInfoSection");
                });

            modelBuilder.Entity("EfCore.BaseSection", b =>
                {
                    b.HasOne("EfCore.ProductNode")
                        .WithMany("Sections")
                        .HasForeignKey("ProductNodeId");
                });

            modelBuilder.Entity("EfCore.ProductNode", b =>
                {
                    b.HasOne("EfCore.ProductLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("EfCore.ProductNode", "Parent")
                        .WithMany("Nodes")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("EfCore.TermsSection", b =>
                {
                    b.HasOne("Rail", "Rail")
                        .WithMany()
                        .HasForeignKey("RailId");

                    b.OwnsOne("Address", "Physical", b1 =>
                        {
                            b1.Property<int>("TermsSectionId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.HasKey("TermsSectionId");

                            b1.ToTable("BaseSection");

                            b1.HasOne("EfCore.TermsSection")
                                .WithOne("Physical")
                                .HasForeignKey("Address", "TermsSectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Address", "Postal", b1 =>
                        {
                            b1.Property<int>("TermsSectionId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Line1");

                            b1.Property<string>("Line2");

                            b1.HasKey("TermsSectionId");

                            b1.ToTable("BaseSection");

                            b1.HasOne("EfCore.TermsSection")
                                .WithOne("Postal")
                                .HasForeignKey("Address", "TermsSectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
